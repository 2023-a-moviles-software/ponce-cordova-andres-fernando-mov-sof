/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package eventoLugar.vista

import com.andresponce.deber.dao.DaoFactory
import com.andresponce.deber.modelo.Lugar
import java.awt.EventQueue
import java.awt.event.ActionEvent
import java.util.logging.Level
import java.util.logging.Logger
import javax.swing.*

/**
 *
 * @author escritorio.virtual20
 */
class ActualizarLugar(): JFrame() {
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private var parent: JFrame? = null
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private fun initComponents() {
        jLabel1 = JLabel()
        jTextFieldNombre = JTextField()
        jLabel2 = JLabel()
        jTextFieldDireccion = JTextField()
        jLabel3 = JLabel()
        jLabel4 = JLabel()
        jTextFieldLongitud = JTextField()
        jLabel5 = JLabel()
        jTextFieldCapacidad = JTextField()
        jLabel6 = JLabel()
        jButtonActualizarEvento = JButton()
        jTextFieldLatitud = JTextField()
        jCheckBoxEstacionamiento = JCheckBox()
        jLabel7 = JLabel()
        jTextFieldID = JTextField()
        defaultCloseOperation = DISPOSE_ON_CLOSE
        jLabel1!!.text = "Nombre:"
        jLabel2!!.text = "Dirección"
        jLabel3!!.text = "Latitud:"
        jLabel4!!.text = "Longitud:"
        jLabel5!!.text = "Capacidad:"
        jLabel6!!.text = "Tiene estacionamiento:"
        jButtonActualizarEvento!!.text = "Actualizar"
        jButtonActualizarEvento!!.addActionListener { evt -> jButtonActualizarEventoActionPerformed(evt) }
        jCheckBoxEstacionamiento!!.text = "Sí"
        jLabel7!!.text = "ID:"
        val layout = GroupLayout(contentPane)
        contentPane.layout = layout
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    layout.createSequentialGroup()
                        .addGap(155, 155, 155)
                        .addComponent(jButtonActualizarEvento)
                        .addContainerGap(163, Short.MAX_VALUE.toInt())
                )
                .addGroup(
                    layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(jLabel1)
                                .addComponent(jLabel3)
                                .addComponent(jLabel4)
                                .addComponent(jLabel5)
                                .addComponent(jLabel6)
                                .addComponent(jLabel7)
                        )
                        .addGap(24, 24, 24)
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addComponent(jTextFieldID)
                                .addComponent(jTextFieldDireccion, GroupLayout.Alignment.TRAILING)
                                .addComponent(jTextFieldLongitud, GroupLayout.Alignment.TRAILING)
                                .addComponent(jTextFieldCapacidad)
                                .addComponent(jTextFieldNombre)
                                .addComponent(jTextFieldLatitud)
                                .addGroup(
                                    layout.createSequentialGroup()
                                        .addComponent(jCheckBoxEstacionamiento)
                                        .addGap(0, 0, Short.MAX_VALUE.toInt())
                                )
                        )
                        .addContainerGap()
                )
        )
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(20, Short.MAX_VALUE.toInt())
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel7)
                                .addComponent(
                                    jTextFieldID,
                                    GroupLayout.PREFERRED_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.PREFERRED_SIZE
                                )
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(
                                    jTextFieldNombre,
                                    GroupLayout.PREFERRED_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.PREFERRED_SIZE
                                )
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(
                                    jTextFieldDireccion,
                                    GroupLayout.PREFERRED_SIZE,
                                    79,
                                    GroupLayout.PREFERRED_SIZE
                                )
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3)
                                .addComponent(
                                    jTextFieldLatitud,
                                    GroupLayout.PREFERRED_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.PREFERRED_SIZE
                                )
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel4)
                                .addComponent(
                                    jTextFieldLongitud,
                                    GroupLayout.PREFERRED_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.PREFERRED_SIZE
                                )
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel5)
                                .addComponent(
                                    jTextFieldCapacidad,
                                    GroupLayout.PREFERRED_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.PREFERRED_SIZE
                                )
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel6)
                                .addComponent(jCheckBoxEstacionamiento)
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonActualizarEvento)
                        .addContainerGap()
                )
        )
        pack()
    } // </editor-fold>//GEN-END:initComponents

    private fun jButtonActualizarEventoActionPerformed(evt: ActionEvent) { //GEN-FIRST:event_jButtonActualizarEventoActionPerformed
        val id = jTextFieldID!!.text.toInt()
        val nombre = jTextFieldNombre!!.text
        val direccion = jTextFieldDireccion!!.text
        val latitud = jTextFieldLatitud!!.text
        val longitud = jTextFieldLongitud!!.text
        val capacidad = jTextFieldCapacidad!!.text
        val tieneEstacionamiento = jCheckBoxEstacionamiento!!.isSelected
        try {
            val latitudDouble = latitud.toBigDecimal()
            val longitudDouble = longitud.toBigDecimal()
            val capacidadInt = capacidad.toInt()
            val lugar = Lugar(
                id = id,
                nombre = nombre,
                direccion = direccion,
                latitud = latitudDouble,
                longitud = longitudDouble,
                capacidad = capacidadInt,
                tieneEstacionamiento = tieneEstacionamiento
            )

            DaoFactory.daoFactory.getLugarDao().actualizar(lugar)

            JOptionPane.showMessageDialog(
                null,
                "Lugar actualizado correctamente",
                "Lugar actualizado",
                JOptionPane.INFORMATION_MESSAGE
            )
            (this.parent as PantallaPrincipal).actualizarTablas()
            dispose()
        } catch (e: Exception) {
            JOptionPane.showMessageDialog(this, "Error al actualizar el lugar\n${e.message}", "Error", JOptionPane.ERROR_MESSAGE)

        }
    } //GEN-LAST:event_jButtonActualizarEventoActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private var jButtonActualizarEvento: JButton? = null
    private var jCheckBoxEstacionamiento: JCheckBox? = null
    private var jLabel1: JLabel? = null
    private var jLabel2: JLabel? = null
    private var jLabel3: JLabel? = null
    private var jLabel4: JLabel? = null
    private var jLabel5: JLabel? = null
    private var jLabel6: JLabel? = null
    private var jLabel7: JLabel? = null
    private var jTextFieldCapacidad: JTextField? = null
    private var jTextFieldDireccion: JTextField? = null
    private var jTextFieldID: JTextField? = null
    private var jTextFieldLatitud: JTextField? = null
    private var jTextFieldLongitud: JTextField? = null
    private var jTextFieldNombre: JTextField? = null // End of variables declaration//GEN-END:variables

    /**
     * Creates new form ActualizarLugar
     */
    init {
        initComponents()
    }

    constructor(parent: JFrame?) : this() {
        this.parent = parent
    }

    companion object {
        /**
         * @param args the command line arguments
         */
        @JvmStatic
        fun main(args: Array<String>) {
            /* Set the Nimbus look and feel */
            //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
            /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
            try {
                for (info in UIManager.getInstalledLookAndFeels()) {
                    if ("Nimbus" == info.name) {
                        UIManager.setLookAndFeel(info.className)
                        break
                    }
                }
            } catch (ex: ClassNotFoundException) {
                Logger.getLogger(ActualizarLugar::class.java.name).log(Level.SEVERE, null, ex)
            } catch (ex: InstantiationException) {
                Logger.getLogger(ActualizarLugar::class.java.name).log(Level.SEVERE, null, ex)
            } catch (ex: IllegalAccessException) {
                Logger.getLogger(ActualizarLugar::class.java.name).log(Level.SEVERE, null, ex)
            } catch (ex: UnsupportedLookAndFeelException) {
                Logger.getLogger(ActualizarLugar::class.java.name).log(Level.SEVERE, null, ex)
            }
            //</editor-fold>

            /* Create and display the form */EventQueue.invokeLater { ActualizarLugar().isVisible = true }
        }
    }
}