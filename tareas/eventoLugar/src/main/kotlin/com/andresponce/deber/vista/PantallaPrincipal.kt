package eventoLugar.vista

import com.andresponce.deber.configuracion.EstandarTiempo
import com.andresponce.deber.dao.DaoFactory
import com.andresponce.deber.modelo.Evento
import com.andresponce.deber.modelo.Lugar
import java.awt.EventQueue
import java.awt.event.ActionEvent
import java.util.logging.Level
import java.util.logging.Logger
import javax.swing.*
import javax.swing.table.DefaultTableModel

class PantallaPrincipal : JFrame() {
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private fun initComponents() {
        jTabbedPanePrincipal = JTabbedPane()
        jPanelEventos = JPanel()
        jButtonNuevoEvento = JButton()
        jButtonActualizarEvento = JButton()
        jButtonBorrarEvento = JButton()
        jScrollPane1 = JScrollPane()
        jTableEventos = JTable()
        jPanelLugares = JPanel()
        jButtonNuevoLugar = JButton()
        jButtonActualizarLugar = JButton()
        jButtonBorrarLugar = JButton()
        jScrollPane2 = JScrollPane()
        jTableLugar = JTable()
        defaultCloseOperation = EXIT_ON_CLOSE
        jButtonNuevoEvento!!.text = "Crear"
        jButtonNuevoEvento!!.addActionListener { evt -> jButtonNuevoEventoActionPerformed(evt) }
        jButtonActualizarEvento!!.text = "Actualizar"
        jButtonActualizarEvento!!.addActionListener { evt -> jButtonActualizarEventoActionPerformed(evt) }
        jButtonBorrarEvento!!.text = "Borrar"
        jButtonBorrarEvento!!.addActionListener { evt -> jButtonBorrarEventoActionPerformed(evt) }
        jTableEventos!!.model = object : DefaultTableModel(
            arrayOf(
                arrayOf(null, null, null, null, null, null, null, null),
                arrayOf(null, null, null, null, null, null, null, null),
                arrayOf(null, null, null, null, null, null, null, null),
                arrayOf(null, null, null, null, null, null, null, null)
            ), arrayOf(
                "ID", "Nombre", "Descripción", "Lugar", "Fecha", "Hora de inicio", "Duración", "Precio de entrada"
            )
        ) {
            var types = arrayOf(
                Int::class.java,
                Any::class.java,
                Any::class.java,
                Any::class.java,
                Any::class.java,
                Any::class.java,
                Any::class.java,
                Any::class.java
            )
            var canEdit = booleanArrayOf(
                false, false, false, false, false, false, false, false
            )

            override fun getColumnClass(columnIndex: Int): Class<*> {
                return types[columnIndex]
            }

            override fun isCellEditable(rowIndex: Int, columnIndex: Int): Boolean {
                return canEdit[columnIndex]
            }
        }
        jScrollPane1!!.setViewportView(jTableEventos)
        val jPanelEventosLayout = GroupLayout(jPanelEventos)
        jPanelEventos!!.layout = jPanelEventosLayout
        jPanelEventosLayout.setHorizontalGroup(
            jPanelEventosLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    GroupLayout.Alignment.TRAILING, jPanelEventosLayout.createSequentialGroup()
                        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE.toInt())
                        .addComponent(jButtonBorrarEvento)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonActualizarEvento)
                        .addGap(12, 12, 12)
                        .addComponent(jButtonNuevoEvento)
                        .addContainerGap()
                )
                .addGroup(
                    jPanelEventosLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 832, Short.MAX_VALUE.toInt())
                )
        )
        jPanelEventosLayout.setVerticalGroup(
            jPanelEventosLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    jPanelEventosLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(
                            jPanelEventosLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(jButtonNuevoEvento)
                                .addComponent(jButtonActualizarEvento)
                                .addComponent(jButtonBorrarEvento)
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 358, GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE.toInt())
                )
        )
        jTabbedPanePrincipal!!.addTab("Eventos", jPanelEventos)
        jButtonNuevoLugar!!.text = "Crear"
        jButtonNuevoLugar!!.addActionListener { evt -> jButtonNuevoLugarActionPerformed(evt) }
        jButtonActualizarLugar!!.text = "Actualizar"
        jButtonActualizarLugar!!.addActionListener { evt -> jButtonActualizarLugarActionPerformed(evt) }
        jButtonBorrarLugar!!.text = "Borrar"
        jButtonBorrarLugar!!.addActionListener { evt -> jButtonBorrarLugarActionPerformed(evt) }
        jTableLugar!!.model = object : DefaultTableModel(
            arrayOf(
                arrayOf(null, null, null, null, null, null, null),
                arrayOf(null, null, null, null, null, null, null),
                arrayOf(null, null, null, null, null, null, null),
                arrayOf(null, null, null, null, null, null, null)
            ), arrayOf(
                "ID", "Nombre", "Dirección", "Latitud", "Longitud", "Capacidad", "¿Tiene estacionamiento?"
            )
        ) {
            var types = arrayOf(
                Int::class.java,
                Any::class.java,
                Any::class.java,
                Any::class.java,
                Any::class.java,
                Any::class.java,
                Boolean::class.java
            )
            var canEdit = booleanArrayOf(
                false, false, false, false, false, false, false
            )

            override fun getColumnClass(columnIndex: Int): Class<*> {
                return types[columnIndex]
            }

            override fun isCellEditable(rowIndex: Int, columnIndex: Int): Boolean {
                return canEdit[columnIndex]
            }
        }
        jScrollPane2!!.setViewportView(jTableLugar)
        val jPanelLugaresLayout = GroupLayout(jPanelLugares)
        jPanelLugares!!.layout = jPanelLugaresLayout
        jPanelLugaresLayout.setHorizontalGroup(
            jPanelLugaresLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    GroupLayout.Alignment.TRAILING, jPanelLugaresLayout.createSequentialGroup()
                        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE.toInt())
                        .addComponent(jButtonBorrarLugar)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonActualizarLugar)
                        .addGap(12, 12, 12)
                        .addComponent(jButtonNuevoLugar)
                        .addContainerGap()
                )
                .addGroup(
                    jPanelLugaresLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, GroupLayout.DEFAULT_SIZE, 832, Short.MAX_VALUE.toInt())
                )
        )
        jPanelLugaresLayout.setVerticalGroup(
            jPanelLugaresLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    jPanelLugaresLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(
                            jPanelLugaresLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(jButtonNuevoLugar)
                                .addComponent(jButtonActualizarLugar)
                                .addComponent(jButtonBorrarLugar)
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 358, GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE.toInt())
                )
        )
        jTabbedPanePrincipal!!.addTab("Lugares", jPanelLugares)
        val layout = GroupLayout(contentPane)
        contentPane.layout = layout
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTabbedPanePrincipal)
                        .addContainerGap()
                )
        )
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTabbedPanePrincipal)
                        .addContainerGap()
                )
        )
        pack()
    } // </editor-fold>//GEN-END:initComponents

    private fun jButtonNuevoEventoActionPerformed(evt: ActionEvent) { //GEN-FIRST:event_jButtonNuevoEventoActionPerformed
        val nuevoEvento = CrearEvento(this)
        nuevoEvento.isVisible = true
    } //GEN-LAST:event_jButtonNuevoEventoActionPerformed

    private fun jButtonActualizarEventoActionPerformed(evt: ActionEvent) { //GEN-FIRST:event_jButtonActualizarEventoActionPerformed
        val actualizarEvento = ActualizarEvento(this)
        actualizarEvento.isVisible = true
    } //GEN-LAST:event_jButtonActualizarEventoActionPerformed

    private fun jButtonNuevoLugarActionPerformed(evt: ActionEvent) { //GEN-FIRST:event_jButtonNuevoLugarActionPerformed
        val nuevoLugar = CrearLugar(this)
        nuevoLugar.isVisible = true
    } //GEN-LAST:event_jButtonNuevoLugarActionPerformed

    private fun jButtonActualizarLugarActionPerformed(evt: ActionEvent) { //GEN-FIRST:event_jButtonActualizarLugarActionPerformed
        val actualizarLugar = ActualizarLugar(this)
        actualizarLugar.isVisible = true
    } //GEN-LAST:event_jButtonActualizarLugarActionPerformed

    private fun jButtonBorrarEventoActionPerformed(evt: ActionEvent) { //GEN-FIRST:event_jButtonBorrarEventoActionPerformed
        val borrarEvento = EliminarEvento(this)
        borrarEvento.isVisible = true
    } //GEN-LAST:event_jButtonBorrarEventoActionPerformed

    private fun jButtonBorrarLugarActionPerformed(evt: ActionEvent) { //GEN-FIRST:event_jButtonBorrarLugarActionPerformed
        val borrarLugar = EliminarLugar(this)
        borrarLugar.isVisible = true
    } //GEN-LAST:event_jButtonBorrarLugarActionPerformed

    private fun actualizarTablaEvento(){
        val eventos = DaoFactory.daoFactory.getEventoDao().obtenerTodos()
        val modelo = jTableEventos!!.model as DefaultTableModel
        modelo.setRowCount(0)
        for (evento: Evento in eventos) {
            modelo.addRow(
                arrayOf(
                    evento.id,
                    evento.nombre,
                    evento.descripcion,
                    evento.lugar.nombre,
                    evento.fecha.format(EstandarTiempo.FORMATO_FECHA),
                    evento.horaInicio.format(EstandarTiempo.FORMATO_HORA),
                    evento.duracion.format(EstandarTiempo.FORMATO_HORA),
                    evento.precioDeEntrada
                )
            )
        }
    }

    private fun actualizarTablaLugar(){
        val lugares = DaoFactory.daoFactory.getLugarDao().obtenerTodos()
        val modelo = jTableLugar!!.model as DefaultTableModel
        modelo.setRowCount(0)
        for (lugar: Lugar in lugares) {
            modelo.addRow(
                arrayOf(
                    lugar.id,
                    lugar.nombre,
                    lugar.direccion,
                    lugar.latitud,
                    lugar.longitud,
                    lugar.capacidad,
                    if (lugar.tieneEstacionamiento) "Sí" else "No"
                )
            )
        }
    }

    fun actualizarTablas(){
        actualizarTablaEvento()
        actualizarTablaLugar()
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private var jButtonActualizarEvento: JButton? = null
    private var jButtonActualizarLugar: JButton? = null
    private var jButtonBorrarEvento: JButton? = null
    private var jButtonBorrarLugar: JButton? = null
    private var jButtonNuevoEvento: JButton? = null
    private var jButtonNuevoLugar: JButton? = null
    private var jPanelEventos: JPanel? = null
    private var jPanelLugares: JPanel? = null
    private var jScrollPane1: JScrollPane? = null
    private var jScrollPane2: JScrollPane? = null
    private var jTabbedPanePrincipal: JTabbedPane? = null
    private var jTableEventos: JTable? = null
    private var jTableLugar: JTable? = null // End of variables declaration//GEN-END:variables

    /**
     * Creates new form PantallaPrincipsl
     */
    init {
        initComponents()
        actualizarTablas()
    }

    companion object {
        /**
         * @param args the command line arguments
         */
        @JvmStatic
        fun main(args: Array<String>) {
            /* Set the Nimbus look and feel */
            //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
            /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
            try {
                for (info in UIManager.getInstalledLookAndFeels()) {
                    if ("Nimbus" == info.name) {
                        UIManager.setLookAndFeel(info.className)
                        break
                    }
                }
            } catch (ex: ClassNotFoundException) {
                Logger.getLogger(PantallaPrincipal::class.java.name).log(Level.SEVERE, null, ex)
            } catch (ex: InstantiationException) {
                Logger.getLogger(PantallaPrincipal::class.java.name).log(Level.SEVERE, null, ex)
            } catch (ex: IllegalAccessException) {
                Logger.getLogger(PantallaPrincipal::class.java.name).log(Level.SEVERE, null, ex)
            } catch (ex: UnsupportedLookAndFeelException) {
                Logger.getLogger(PantallaPrincipal::class.java.name).log(Level.SEVERE, null, ex)
            }
            //</editor-fold>
            //</editor-fold>

            /* Create and display the form */EventQueue.invokeLater { PantallaPrincipal().isVisible = true }
        }
    }
}